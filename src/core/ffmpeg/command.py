import uuid
from abc import abstractmethod
from pathlib import Path
from typing import List, Optional


class FFmpegCommand:
    """
    Represents an FFmpeg command to be executed

    Output path is generated by using UUID as the filename and extension from the config
    """

    def __init__(self, input_path: Path):
        self.ffmpeg_path: Path = Path(__file__).parent.parent.parent.parent / "libs" / "ffmpeg" / "ffmpeg"
        self.input_path: Path = input_path
        self._output_path: Optional[Path] = None

    @property
    def output_path(self) -> Path:
        """
        lazy load output path
        """
        if self._output_path is None:
            output_basename = f"{uuid.uuid4()}.{self._get_output_extension()}"
            self._output_path = self.input_path.parent / output_basename

        return self._output_path

    @abstractmethod
    def _get_output_extension(self) -> str:
        pass

    @abstractmethod
    def _get_ffmpeg_global_options(self) -> List[str]:
        pass

    @abstractmethod
    def _get_ffmpeg_input_options(self) -> List[str]:
        pass

    @abstractmethod
    def _get_ffmpeg_output_options(self) -> List[str]:
        pass

    def to_full_command(self) -> List[str]:
        """
        :return: the full FFmpeg command as a string list
        """
        return [
            str(self.ffmpeg_path),
            *self._get_ffmpeg_global_options(),
            *self._get_ffmpeg_input_options(),
            "-i", str(self.input_path),
            *self._get_ffmpeg_output_options(),
            str(self.output_path)
        ]
